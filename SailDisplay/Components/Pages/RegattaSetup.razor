@page "/RegattaSetup"

@using Microsoft.AspNetCore.SignalR.Client
@using SailDisplay.Components.Data
@using SailDisplay.Components.Hubs
@using System.Drawing;

@inject NetService netService
@inject NavigationManager navigationManager
@inject IConfiguration configuration


<h3>RegattaSetup</h3>

<table>
    <tbody>
        <tr>
            <td>Start mark Port</td>
            <td></td>
            <td><button @onclick="@(async () => { await SetStartMarkPort(); })">Set</button></td>
        </tr>
        <tr>
            <td>Start mark Starboard</td>
            <td></td>
            <td><button @onclick="@(async () => { await SetStartMarkStarboard(); })">Set</button></td>
        </tr>
        <tr>
            <td>Start time</td>
            <td><input type="number" @bind="StartTimestampHour" />:<input type="number" @bind="StartTimestampMinute" />:<input type="number" @bind="StartTimestampSecond" /></td>
            <td><button @onclick="@(async () => { await SetStarttime(); })">Set</button></td>
        </tr>
    </tbody>
</table>

@code {
    private HubConnection? hubConnection;
    private DateTime StartTimestamp { get; set; }
    private int StartTimestampHour { get; set; }
    private int StartTimestampMinute { get; set; }
    private int StartTimestampSecond { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(netService.StartTimestamp > DateTime.MinValue)
        {
            StartTimestamp = netService.StartTimestamp;
        }
        else
        {
            StartTimestamp = DateTime.Now.AddMinutes(30);
        }

        StartTimestampHour = StartTimestamp.Hour;
        StartTimestampMinute = StartTimestamp.Minute;
        StartTimestampSecond = StartTimestamp.Second;

    }

    private async Task SetStartMarkPort()
    {

    }
    private async Task SetStartMarkStarboard()
    {

    }
    private async Task SetStarttime()
    {
        netService.StartTimestamp = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, StartTimestampHour, StartTimestampMinute, StartTimestampSecond);
    }
}
