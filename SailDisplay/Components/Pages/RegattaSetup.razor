@page "/RegattaSetup"

@using Microsoft.AspNetCore.SignalR.Client
@using SailDisplay.Components.Data
@using SailDisplay.Components.Hubs
@using System.Drawing;

@inject NetService netService
@inject NavigationManager navigationManager
@inject IConfiguration configuration


<h3>RegattaSetup</h3>

<table>
    <tbody>
        <tr>
            <td>Start mark Port</td>
            <td></td>
            <td><button @onclick="@(async () => { await SetStartMarkPort(); })">Set</button></td>
        </tr>
        <tr>
            <td>Start mark Starboard</td>
            <td></td>
            <td><button @onclick="@(async () => { await SetStartMarkStarboard(); })">Set</button></td>
        </tr>
        <tr>
            <td>Start time</td>
            <td><input type="time" @bind="StartTimestamp"/></td>
            <td><button @onclick="@(async () => { await SetStarttime(); })">Set</button></td>
        </tr>
    </tbody>
</table>

@code {
    private HubConnection? hubConnection;
    private DateTime StartTimestamp { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(netService.StartTimestamp > DateTime.MinValue)
        {
            StartTimestamp = netService.StartTimestamp;
        }
        else
        {
            StartTimestamp = DateTime.Now.AddMinutes(30);
        }
        /*hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/nethub"))//configuration["NetHubURI"]))
            .Build();

        hubConnection.On<NetHub.eDataType, double>("Data", (t, o) =>
        {
            if (t == )
            {
                if (t == NetHub.eDataType.SOG || t == NetHub.eDataType.STW)
                {
                    var temp = o;
                    Value = Math.Round((double)o, 2).ToString("#0.00");
                }
                else if (t == NetHub.eDataType.COG || t == NetHub.eDataType.Heading || t == NetHub.eDataType.HeadingToWP || t == NetHub.eDataType.Heeling)
                {
                    Value = Math.Round(o, 0).ToString("000") + "°";
                }
                else if (t == NetHub.eDataType.TimeToStart)
                {
                    TimeSpan ts = TimeSpan.FromSeconds(o);
                    Value = ts.ToString(@"mm\:ss");

                }
                InvokeAsync(StateHasChanged);
            }
        });
        await hubConnection.StartAsync();
        await base.OnInitializedAsync();
        */

    }

    private async Task SetStartMarkPort()
    {

    }
    private async Task SetStartMarkStarboard()
    {

    }
    private async Task SetStarttime()
    {
        netService.StartTimestamp = StartTimestamp;
    }
}
