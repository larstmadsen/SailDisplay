@using SailDisplay.Components.Hubs

@using Microsoft.AspNetCore.SignalR.Client
@using SailDisplay.Components.Data
@using SailDisplay.Components.Hubs
@using System.Drawing;

@inject NetService netService
@inject NavigationManager navigationManager
@inject IConfiguration configuration
<center>
        <svg height="500" width="500" xmlns="http://www.w3.org/2000/svg">

    
    

        <g transform="translate(250, 250) rotate(@(-Heading-90))">
            <polygon points="250,0 200,-10 200,10" fill="red" />
        </g>
                
        <g transform="translate(250, 250) rotate(@(Heading+HeadingWayPoint-180))">
            <polygon points="230,0 200,-20 200,20" fill="orange" />
        </g>


        <circle r="200" cx="250" cy="250" style="stroke:gray;stroke-width:3" />
        @if (TWA > 10 && TWA < 170)
        {
            <circle id="success-value" r="190" cx="0" cy="0" stroke="red" fill="none" stroke-width="20" stroke-dasharray="@(TWAMaxDiff/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(TWA-90))" />
            <circle id="success-value" r="190" cx="0" cy="0" stroke="green" fill="none" stroke-width="20" stroke-dasharray="@(-TWAMinDiff/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(TWAMinDiff+TWA-90))" />
        }
        else if (TWA > 190 && TWA < 350)
        {
            <circle id="success-value" r="190" cx="0" cy="0" stroke="green" fill="none" stroke-width="20" stroke-dasharray="@(TWAMaxDiff/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(TWA-90))" />
            <circle id="success-value" r="190" cx="0" cy="0" stroke="red" fill="none" stroke-width="20" stroke-dasharray="@(-TWAMinDiff/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(TWAMinDiff+TWA-90))" />
        }
        else
        {
            <circle id="success-value" r="190" cx="0" cy="0" stroke="yellow" fill="none" stroke-width="20" stroke-dasharray="@(-TWAMinDiff+TWAMaxDiff/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(TWAMinDiff+TWA-90))" />
        }


        @for(int i = 0; i < 360; i+=10)
        {
            double bold = 0;
            if(i % 30 == 0)
            {
                bold = 1;
            }
            
            double x1 = 250 + 200*Math.Sin((i) * Math.PI / 180.0);
            double x2 = 250 + (-15*bold+190)*Math.Sin((i) * Math.PI / 180.0);
            double y1 = 250 -200*Math.Cos((i) * Math.PI / 180.0);
            double y2 = 250 -(-15 * bold + 190) * Math.Cos((i) * Math.PI / 180.0);
        
            <line x1="@x1" x2="@x2" y1="@y1" y2="@y2" style="stroke:@(i % 360 == 0 ? "white" : "gray");stroke-width:@(bold+2)"></line>
        
        }
        <g transform="translate(250, 250) rotate(@(AWA-90))">
            <polygon points="190,0 160,-20 160,20" fill="orange" />
        </g>
        <g transform="translate(250, 250) rotate(@(TWA-90))">
            <polygon points="0,0 160,-20 160,20" fill="yellow" />
            <polygon points="190,0 160,-20 160,20" fill="yellow" />
        </g>

        <g transform="translate(250, 210)">
            <path id="lineAB" d="M -30 120 q -6 -80 30 -140" stroke="blue" fill="none" stroke-width="4" />
            <path id="lineCB" d="M 30 120 q 6 -80 -30 -140" stroke="blue" fill="none" stroke-width="4" />
            <path id="lineAB" d="M -30 120 l 60 0" stroke="blue" stroke-width="4" />
        </g>
    </svg>
</center>
@code {
    public double Heading { get; set; }
    public double HeadingWayPoint { get; set; }
    public double AWA { get; set; }
    public double TWA { get; set; }
    public List<double> TWAHistory { get; set; } = new List<double>();
    public double TWAMinDiff
    {
        get 
        { 
            if(TWAHistory.Count == 0) return 0;
            double min = 0;

            if (TWA < 180)
            {
                min = TWAHistory.Min();
                var temp = TWAHistory.Where(p => p > TWA + 180);
                if(temp.Count() > 0)
                {
                    var min_180 = temp.Max() - 360;
                    min = Math.Min(min, min_180);
                }
            }
            else
            {
                var temp = TWAHistory.Where(p => p > TWA - 180);
                if (temp.Count() > 0)
                {
                    min = temp.Min();
                }
            }

            return min - TWA;
        }
    }
    public double TWAMaxDiff
    {
        get 
        { 
            if (TWAHistory.Count == 0) return 0;
            double max = 0;

            if (TWA > 180)
            {
                max = TWAHistory.Max();
                var temp = TWAHistory.Where(p => p < TWA - 180);
                if (temp.Count() > 0)
                {
                    var max_180 = temp.Max() + 360;
                    max = Math.Max(max, max_180);
                }
            }
            else
            {
                var temp = TWAHistory.Where(p => p < TWA + 180);
                if (temp.Count() > 0)
                {
                    max = temp.Max();
                }

            }

            return max - TWA;
        }        
    }
       

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/nethub"))//configuration["NetHubURI"]))
            .Build();

        hubConnection.On<NetHub.eDataType, double>("double", (t, o) =>
        {
            if (t == NetHub.eDataType.TWA)
            {
                TWA = o;
                TWAHistory.Add(o);
                while(TWAHistory.Count > 100)
                {
                    TWAHistory.RemoveAt(0);
                }
                InvokeAsync(StateHasChanged);
            }
            else if (t == NetHub.eDataType.AWA)
            {
                AWA = o;
                InvokeAsync(StateHasChanged);
            }
            else if (t == NetHub.eDataType.Heading)
            {
                Heading = o;
                InvokeAsync(StateHasChanged);
            }
            else if (t == NetHub.eDataType.WaypointBearing)
            {
                HeadingWayPoint = o;
                InvokeAsync(StateHasChanged);
            }


        });
        await hubConnection.StartAsync();
        await base.OnInitializedAsync();


    }
}
