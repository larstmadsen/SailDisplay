@using SailDisplay.Components.Hubs

@using Microsoft.AspNetCore.SignalR.Client
@using SailDisplay.Components.Data
@using SailDisplay.Components.Hubs
@using System.Drawing;

@inject NetService netService
@inject NavigationManager navigationManager
@inject IConfiguration configuration
<center>
    <p>TWA: @TWA</p>
    <p>Min: @TWAMin</p>
    <p>Max: @TWAMax</p>
    <p>Diff TWA Heading: @Converters.AngelDiff(TWA, Heading)</p>
    <p>Diff TWAMax TWA: @Converters.AngelDiff(TWAMax, TWA)</p>
    <p>Diff TWA TWAMin: @Converters.AngelDiff(TWA, TWAMin)</p>
    <p>Diff TWAMax TWAMin: @Converters.AngelDiff(TWAMax, TWAMin)</p>
    
    <svg height="500" width="500" xmlns="http://www.w3.org/2000/svg">

    
    


        <circle r="200" cx="250" cy="250" style="stroke:gray;stroke-width:3" />
        @if ((Converters.AngelDiff(TWA, Heading) > 20 && Converters.AngelDiff(TWA, Heading) < 60) || (Converters.AngelDiff(TWA, Heading) < 180 && Converters.AngelDiff(TWA, Heading) > 100))
        {
            <circle id="success-value" r="190" cx="0" cy="0" stroke="red" fill="none" stroke-width="20" stroke-dasharray="@(Converters.AngelDiff(TWAMax,TWA)/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(-Heading+TWA-90))" />
            <circle id="success-value" r="190" cx="0" cy="0" stroke="green" fill="none" stroke-width="20" stroke-dasharray="@(Converters.AngelDiff(TWA,TWAMin)/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(-Heading+TWAMin-90))" />
        }
        else if ((Converters.AngelDiff(TWA, Heading) < -20 && Converters.AngelDiff(TWA, Heading) > -60) || (Converters.AngelDiff(TWA, Heading) > -180 && Converters.AngelDiff(TWA, Heading) < -100))
        {
            <circle id="success-value" r="190" cx="0" cy="0" stroke="green" fill="none" stroke-width="20" stroke-dasharray="@(Converters.AngelDiff(TWAMax,TWA)/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(-Heading+TWA-90))" />
            <circle id="success-value" r="190" cx="0" cy="0" stroke="red" fill="none" stroke-width="20" stroke-dasharray="@(Converters.AngelDiff(TWA,TWAMin)/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(-Heading+TWAMin-90))" />
        }
        else
        {
            <circle id="success-value" r="190" cx="0" cy="0" stroke="yellow" fill="none" stroke-width="20" stroke-dasharray="@(Converters.AngelDiff(TWAMax,TWAMin)/360*2*Math.PI*190), @(2*Math.PI*190)" transform="translate(250, 250) rotate(@(-Heading+TWAMin-90))" />
        }


        @for(int i = 0; i < 360; i+=10)
        {
            double bold = 0;
            if(i % 30 == 0)
            {
                bold = 1;
            }
            
            double x1 = 250 + 200*Math.Sin((i-Heading) * Math.PI / 180.0);
            double x2 = 250 + (-15*bold+190)*Math.Sin((i-Heading) * Math.PI / 180.0);
            double y1 = 250 -200*Math.Cos((i-Heading) * Math.PI / 180.0);
            double y2 = 250 -(-15 * bold + 190) * Math.Cos((i-Heading) * Math.PI / 180.0);
        
            <line x1="@x1" x2="@x2" y1="@y1" y2="@y2" style="stroke:@(i % 360 == 0 ? "white" : "gray");stroke-width:@(bold+2)"></line>
        
        }
        <g transform="translate(250, 250) rotate(@(-Heading+AWA-90))">
            <polygon points="190,0 160,-20 160,20" fill="orange" />
        </g>
        <g transform="translate(250, 250) rotate(@(-Heading+TWA-90))">
            <polygon points="0,0 160,-20 160,20" fill="yellow" />
            <polygon points="190,0 160,-20 160,20" fill="yellow" />
        </g>

        <g transform="translate(250, 230)">
            <path id="lineAB" d="M -15 60 q -3 -40 15 -70" stroke="blue" fill="none" stroke-width="4" />
            <path id="lineCB" d="M 15 60 q 3 -40 -15 -70" stroke="blue" fill="none" stroke-width="4" />
            <path id="lineAB" d="M -15 60 l 30 0" stroke="blue" stroke-width="4" />
        </g>
    </svg>
</center>
@code {
    public double Heading { get; set; }
    public double AWA { get; set; }
    public double TWA { get; set; }
    public List<double> TWAHistory { get; set; } = new List<double>();
    public double TWAMin
    {
        get 
        { 
            if(TWAHistory.Count == 0) return 0;
            return TWAHistory.Min(); 
        }
    }
    public double TWAMax
    {
        get 
        { 
            if (TWAHistory.Count == 0) return 0;
            return TWAHistory.Max() ; 
        }
    }
    

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
            
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/nethub"))//configuration["NetHubURI"]))
            .Build();

        hubConnection.On<NetHub.eDataType, double>("double", (t, o) =>
        {
            if (t == NetHub.eDataType.TWA)
            {
                TWA = o;
                TWAHistory.Add(o);
                while(TWAHistory.Count > 100)
                {
                    TWAHistory.RemoveAt(0);
                }
                InvokeAsync(StateHasChanged);
            }
            else if (t == NetHub.eDataType.AWA)
            {
                AWA = o;
                InvokeAsync(StateHasChanged);
            }
            else if (t == NetHub.eDataType.Heading)
            {
                Heading = o;
                InvokeAsync(StateHasChanged);
            }

        });
        await hubConnection.StartAsync();
        await base.OnInitializedAsync();


    }
}
