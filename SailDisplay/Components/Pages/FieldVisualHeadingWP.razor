@using SailDisplay.Components.Hubs

@using Microsoft.AspNetCore.SignalR.Client
@using SailDisplay.Components.Data
@using SailDisplay.Components.Hubs
@using System.Drawing;

@inject NetService netService
@inject NavigationManager navigationManager
@inject IConfiguration configuration



<svg height="100%" width="100%" xmlns="http://www.w3.org/2000/svg">
    <line x1="-20%" y1="@(110-Heeling)%" x2="120%" y2="@(110+Heeling)%" style="stroke:@Color;stroke-width:40%" />
    
    <circle r="11%" cx="50%" cy="50%" style="stroke:white;stroke-width:10" />
    <circle r="10%" cx="@(50+HeadingDiff)%" cy="50%" fill="darkorange" />
</svg>

@code {
    private HubConnection? hubConnection;

    private double HeadingToWP { get; set; }
    private double Heading { get; set; }
    private double HeadingDiff 
    {
        get
        {
            var temp = HeadingToWP - Heading;
            if(temp < 0) return temp + 360;
            if(temp > 360) return temp - 360;
            return temp;

        }
    }
    private double Heeling { get; set; }
    public string Color
    {
        get
        {
            Color c;
            if(Math.Abs(Heeling) < 15)
            {       
                c = System.Drawing.Color.Blue;
            }
            else if (Math.Abs(Heeling) < 25)
            {
                c = System.Drawing.Color.Green;
            }
            else
            {
                c = System.Drawing.Color.Red;
            }
               
            return "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/nethub"))//configuration["NetHubURI"]))
            .Build();

        HeadingToWP = netService.HeadingToWP;
        Heading = netService.Heading;
        Heeling = netService.Heeling;

        hubConnection.On<NetHub.eDataType, double>("double", (t, o) =>
        {
            if (t == NetHub.eDataType.HeadingToWP)
            {
                HeadingToWP = o;
                InvokeAsync(StateHasChanged);
            }
            else if (t == NetHub.eDataType.Heading)
            {
                Heading = o;
                InvokeAsync(StateHasChanged);
            }
            else if (t == NetHub.eDataType.Heeling)
            {
                Heeling = o;
                InvokeAsync(StateHasChanged);
            }
        });
        await hubConnection.StartAsync();
        await base.OnInitializedAsync();


    }
}
