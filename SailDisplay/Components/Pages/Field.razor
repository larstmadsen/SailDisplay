@using SailDisplay.Components.Hubs

@using Microsoft.AspNetCore.SignalR.Client
@using SailDisplay.Components.Data
@using SailDisplay.Components.Hubs
@using System.Drawing;

@inject NetService netService
@inject NavigationManager navigationManager
@inject IConfiguration configuration

<table style="color: @Color; width: 100%; height: 100%; font-weight: bold">
    <tr>
        <td colspan="3"><text style="font-size: 50px">@Name</text></td>
        
    </tr>
    <tr>
        <td width="10%"></td>
        <td style="text-align: center; vertical-align: central" width="80%"><text style="font-size: 150px">@Value</text></td>
        <td style="text-align: right; vertical-align: bottom" width="10"><text style="font-size: 50px">@Unit</text></td>
    </tr>
</table>



@code {
    [Parameter]
    public NetHub.eDataType DataType { get; set; }

    public string Name
    {
        get
        {
            switch (DataType)
            {
                default:
                    return DataType.ToString() ;
            }
        }
    }
    public string Unit
    {
        get
        {
            switch (DataType)
            {
                case NetHub.eDataType.COG:
                case NetHub.eDataType.Heading:
                case NetHub.eDataType.HeadingToWP:
                case NetHub.eDataType.Heeling:
                    return "T";
                case NetHub.eDataType.STW:
                case NetHub.eDataType.SOG:
                    return "kts";
                case NetHub.eDataType.DistanceToStartLine:
                    return "m";
                case NetHub.eDataType.TimeToBurn:
                    return "s";
                default:
                    return "";
            }
        }
    }
    public string Color
    {
        get
        {
            Color c;
            switch (DataType)
            {
                case NetHub.eDataType.SOG:
                    c = System.Drawing.Color.Purple;
                    break;
                case NetHub.eDataType.COG:
                    c = System.Drawing.Color.Green;
                    break;
                case NetHub.eDataType.Heading:
                    c = System.Drawing.Color.White;
                    break;
                case NetHub.eDataType.STW:
                    c = System.Drawing.Color.Blue;
                    break;
                case NetHub.eDataType.TimeToBurn:
                    c = DynamicColor;
                    break;
                default:
                    c = System.Drawing.Color.White;
                    break;
            }
            return "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
        }
    }
    private Color DynamicColor { get; set; }
    
    public string Value { get; private set; }


    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/nethub"))//configuration["NetHubURI"]))
            .Build();

        hubConnection.On<NetHub.eDataType, double>("double", (t, o) =>
        {
            if (t == DataType)
            {
                if (t == NetHub.eDataType.SOG || t == NetHub.eDataType.STW)
                {
                    var temp = o;
                    Value = Math.Round((double)o, 2).ToString("#0.00");
                }
                else if (t == NetHub.eDataType.COG || t == NetHub.eDataType.Heading || t == NetHub.eDataType.HeadingToWP || t == NetHub.eDataType.Heeling || t == NetHub.eDataType.TWA || t == NetHub.eDataType.AWA)
                {
                    Value = Math.Round(o, 0).ToString("000") + "°";
                }
                else if (t == NetHub.eDataType.TimeToStart)
                {
                    TimeSpan ts = TimeSpan.FromSeconds(o);
                    Value = ts.ToString(@"mm\:ss");
                }

                InvokeAsync(StateHasChanged);
            }
        });
        hubConnection.On<NetHub.eDataType, double?>("double?", (t, o) =>
        {
            if (t == DataType)
            {
               if (t == NetHub.eDataType.DistanceToStartLine)
                {
                    if (o == null)
                    {
                        Value = "-";
                    }
                    else
                    {
                        Value = Math.Round((double)o, 0).ToString();
                    }
                }
                else if (t == NetHub.eDataType.TimeToBurn)
                {
                    if (o == null)
                    {
                        Value = "-";
                        DynamicColor = System.Drawing.Color.White;
                    }
                    else
                    {
                        Value = Math.Round((double)o, 0).ToString();
                        if(o > 0)
                        {
                            DynamicColor = System.Drawing.Color.Red;
                        }
                        else if(o >= -3)
                        {
                            DynamicColor = System.Drawing.Color.Green;
                        }
                        else
                        {
                            DynamicColor = System.Drawing.Color.White;
                        }
                    }
                }
                InvokeAsync(StateHasChanged);
                
            }
        });
        await hubConnection.StartAsync();
        await base.OnInitializedAsync();


    }

}
